#! /usr/bin/env python3

# This code is available under the CC0 Public Domain Dedication:
#   https://creativecommons.org/publicdomain/zero/1.0/
# May it serve you well.

import sys
import textwrap
import os.path
from xml.dom import minidom


URL = 'https://github.com/danklammer/bytesize-icons/raw/master/dist/bytesize-symbols.svg'
ID_PREFIX = 'i-'


if len(sys.argv) != 1:
    # Don't accept any arguments/options, for now
    exit(textwrap.dedent(f"""
    Make a Jinja macro for Dan Klammer's Bytesize Icons

    Usage:

        $ {sys.argv[0]} < bytesize-symbols.svg

    You can download bytesize-symbols.svg from:

        {URL}

    """))


def svg_to_jinja(text):
    print(textwrap.dedent("""
        {#
            These are Dan Klammer's Bytesize Icons:
            https://github.com/danklammer/bytesize-icons

            Generated by bytesize-to-jinja.py:
            https://github.com/encukou/bytesize-to-jinja
        #}
    """))
    print('{%- macro bytesize_icon(name) -%}')
    dom = minidom.parseString(text)
    if_command = 'if'
    icons = {}
    for symbol in list(dom.getElementsByTagName("symbol")):
        symbol_id = symbol.getAttribute('id')
        if symbol_id.startswith(ID_PREFIX):
            symbol_name = symbol_id[len(ID_PREFIX):]
            icons[symbol_name] = 1
            print(f'{{%- {if_command} name == "{symbol_name}" -%}}')
            if_command = 'elif'
            viewbox = symbol.getAttribute('viewBox')
            print('<svg class="icon icon-%s" viewBox="%s">'
                  % (symbol_name, viewbox))
            for child in symbol.childNodes:
                if child.nodeType != dom.TEXT_NODE:
                    print(child.toxml())
            print('</svg>')
    print('{%- else -%}')
    print('{#- To make the error as meaningful as possible, this')
    print(' #  causes an actual lookup error in a dict of all icon names.')
    print('-#}')
    icons = {k: v for k, v in sorted(icons.items())}
    print(f'{{% set _icons = {icons} %}}')
    print('error: icon not found: {{ _icons[name] }}')
    print('{%- endif -%}')
    print('{%- endmacro -%}')


if __name__ == '__main__':
    svg_to_jinja(sys.stdin.read())
